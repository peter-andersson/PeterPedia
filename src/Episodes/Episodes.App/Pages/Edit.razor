@page "/edit/{id}"
@attribute [Authorize(Roles = "admin")]

<h4 class="mt-2">TV Show information</h4>

@if (Loading)
{
    <Spinner Text="Loading..." />
}
else if (Show is not null)
{
    <div class="row">
        <EditForm class="form" Model="@Show" OnValidSubmit="@SaveAsync">
            <div class="row">
                <div class="col-12 mb-2">
                    <div class="form-floating">
                        <InputText id="show-title" class="form-control" type="text" @bind-Value="Show.Title"></InputText>
                        <label for="show-title">Title</label>
                    </div>
                </div>
                <div class="col-12 mb-2">
                    <div class="form-floating">
                        <input id="show-original-title" class="form-control" type="text" value="@Show.OriginalTitle" disabled />
                        <label for="show-original-title">Original title</label>
                    </div>
                </div>
                <div class="col-12 mb-2">
                    <div class="form-floating">
                        <InputText id="show-title" class="form-control" type="text" @bind-Value="Show.Source"></InputText>
                        <label for="show-title">Source</label>
                    </div>
                </div>
                <div class="col-12 mb-2">
                    <div class="form-check">
                        <InputCheckbox id="show-refresh" class="form-check-input" type="text" @bind-Value="Show.Refresh"></InputCheckbox>
                        <label for="show-refresh" class="form-check-label">Refresh</label>
                    </div>
                </div>
                <div class="col-4 mb-2">
                    <div class="form-floating">
                        <input id="show-status" class="form-control" type="text" value="@Show.Status" disabled />
                        <label for="show-status">Status</label>
                    </div>
                </div>
                <div class="col-4 mb-2">
                    <div class="form-floating">
                        <input id="show-seasons" class="form-control" type="text" value="@Show.SeasonCount" disabled />
                        <label for="show-seasons">Seasons</label>
                    </div>
                </div>
                <div class="col-4 mb-2">
                    <div class="form-floating">
                        <input id="show-episodes" class="form-control" type="text" value="@Show.EpisodeCount" disabled />
                        <label for="show-episodes">Episodes</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <p class="mt-2">
                    <a href="@Show.TheMovieDbUrl.ToString()" target="_blank">View on TMDb</a>
                </p>
            </div>
            <div class="row">
                <div class="d-flex">
                    <SpinnerButton Type="submit" Class="btn btn-success" IsTaskRunning="@IsSaveTaskRunning" Text="Save" ActionText="Saving..." />
                    <SpinnerButton Type="button" Class="btn btn-danger ms-2" IsTaskRunning="@IsDeleteTaskRunning" Text="Delete" ActionText="Deleting..." OnClickCallback="@DeleteAsync" />
                    <button type="button" class="btn btn-secondary ms-2" @onclick="Close">Cancel</button>
                </div>
            </div>
        </EditForm>
        <div class="row overflow-scroll">
            <div class="form-check form-switch mt-2">
                <input checked="@ShowAll" class="form-check-input" type="checkbox" role="switch" id="switch-showall" @onchange="ToggleShowAll">
                <label class="form-check-label" for="switch-showall">Show all episodes</label>
            </div>
            @foreach (var season in Show.Seasons.OrderBy(s => s.SeasonNumber))
            {
                @if (ShowAll || !season.IsAllWatched)
                {
                    <div class="col-12">
                        <h3 class="mb-3">
                            Season @season.SeasonNumber
                            @if (season.IsAllWatched)
                            {
                                <SpinnerButton Type="button" Class="btn btn-primary float-end" IsTaskRunning="@IsTaskRunning" Text="Not watched" ActionText="Updating..." OnClickCallback="@(async () => await UnwatchSeasonAsync(season))" />
                            }
                            else
                            {
                                <SpinnerButton Type="button" Class="btn btn-primary float-end" IsTaskRunning="@IsTaskRunning" Text="Watched" ActionText="Updating..." OnClickCallback="@(async () => await WatchSeasonAsync(season))" />
                            }
                        </h3>
                        <ul class="list-group list-group-flush mb-3">
                            @if (IsTaskRunning)
                            {
                                <li class="list-group-item">Processing season...</li>
                            }
                            else
                            {
                                @foreach (var episode in season.Episodes.OrderBy(e => e.EpisodeNumber))
                                {
                                    @if (ShowAll)
                                    {
                                        <li class="list-group-item">
                                            <span>@($"{episode.EpisodeNumber} - {episode.Title} - {episode.AirDate?.ToString("MMM d, yyyy")}")</span>
                                            @if (episode.Watched)
                                            {
                                                <SpinnerButton Type="button" Class="btn btn-primary float-end" IsTaskRunning="@IsTaskRunning" Text="Not watched" ActionText="Updating..." OnClickCallback="@(async () => await UnwatchEpisodeAsync(episode))" />
                                            }
                                            else
                                            {
                                                <SpinnerButton Type="button" Class="btn btn-primary float-end" IsTaskRunning="@IsTaskRunning" Text="Watched" ActionText="Updating..." OnClickCallback="@(async () => await WatchEpisodeAsync(episode))" />
                                            }
                                        </li>
                                    }
                                    else if ((episode.Watched == false) && (episode.AirDate != null) && (episode.AirDate <= DateTime.UtcNow))
                                    {
                                        <li class="list-group-item">
                                            <span>@($"{episode.EpisodeNumber} - {episode.Title} - {episode.AirDate?.ToString("MMM d, yyyy")}")</span>
                                            @if (episode.Watched)
                                            {
                                                <SpinnerButton Type="button" Class="btn btn-primary float-end" IsTaskRunning="@IsTaskRunning" Text="Not watched" ActionText="Updating..." OnClickCallback="@(async () => await UnwatchEpisodeAsync(episode))" />
                                            }
                                            else
                                            {
                                                <SpinnerButton Type="button" Class="btn btn-primary float-end" IsTaskRunning="@IsTaskRunning" Text="Watched" ActionText="Updating..." OnClickCallback="@(async () => await WatchEpisodeAsync(episode))" />
                                            }
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <h5>No tv show found!</h5>
}

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

