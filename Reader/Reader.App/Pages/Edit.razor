@page "/subscriptions/edit/{id}"
@attribute [Authorize(Roles = "admin")]

<ReaderTitle Text="Edit subscription" />

@if (Loading)
{
    <LoadingIndicator Text="Loading..." />
}
else if (Subscription is not null)
{
    <EditForm class="mt-2 flex flex-col gap-2" Model="@EditModel" OnValidSubmit="@SaveAsync">
        <DataAnnotationsValidator />

        <div class="flex flex-col">
            <label for="title">Title</label>
            <InputText id="title" class="form-control" @bind-Value="EditModel.Title"></InputText>
            <div class="text-red-500">
                <ValidationMessage For="() => EditModel.Title" />
            </div>
        </div>

        <div class="flex flex-col">
            <label for="group">Group</label>
            <InputText id="group" class="form-control" @bind-Value="EditModel.Group" />
        </div>

        <div class="flex flex-col">
            <label for="update-interval">Update interval in minutes</label>
            <InputNumber id="update-interval" class="form-control" @bind-Value="EditModel.UpdateIntervalMinute" />
            <div class="text-red-500">
                <ValidationMessage For="() => EditModel.UpdateIntervalMinute" />
            </div>
        </div>

        <div class="flex flex-col">
            <label for="update-at">Update at</label>
            <InputText id="update-at" class="form-control" @bind-Value="EditModel.UpdateAt" />
            <div class="text-red-500">
                <ValidationMessage For="() => EditModel.UpdateAt" />
            </div>
        </div>

        <div class="flex flex-col">
            <label for="url">Url</label>
            <InputText id="url" class="form-control" @bind-Value="EditModel.Url" />
            <div class="text-red-500">
                <ValidationMessage For="() => EditModel.Url" />
            </div>
        </div>

        <div class="flex flex-col">
            <label for="last">Last updated</label>
            <input id="last" class="form-control" value="@Subscription.LastUpdated?.ToString("d MMM yyyy HH:mm")" disabled />
        </div>

        <div>
            <ReaderButton Type="ButtonType.Submit" Classes="btn-success" IsTaskRunning="@IsSaveTaskRunning" Text="Save" ActionText="Saving" />
            <ReaderButton Classes="btn-danger" IsTaskRunning="@IsDeleteTaskRunning" OnClickCallback="async () => await DeleteAsync()" Text="Delete" ActionText="Deleting" />
            <ReaderButton Classes="btn-other" OnClickCallback="Close" Text="Cancel" />
        </div>
    </EditForm>
}
else
{
    <div class="text-lg">
        Subscription not found!
    </div>
}
